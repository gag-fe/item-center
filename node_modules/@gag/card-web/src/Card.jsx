import React from 'react';
import classNames from 'classnames';
import '../style';
import PropTypes from 'prop-types';

 class Card extends React.Component{
   render(){
     const {
       prefixCls = 'ant-card', className, extra, bodyStyle,
       title, loading, bordered = true, ...others,
     } = this.props;
     let children = this.props.children;
     const classString = classNames(prefixCls, className, {
       [`${prefixCls}-loading`]: loading,
       [`${prefixCls}-bordered`]: bordered,
     });

     if (loading) {
       children = (
         <div>
           <p className={`${prefixCls}-loading-block`} style={{ width: '94%' }} />
           <p>
             <span className={`${prefixCls}-loading-block`} style={{ width: '28%' }} />
             <span className={`${prefixCls}-loading-block`} style={{ width: '62%' }} />
           </p>
           <p>
             <span className={`${prefixCls}-loading-block`} style={{ width: '22%' }} />
             <span className={`${prefixCls}-loading-block`} style={{ width: '66%' }} />
           </p>
           <p>
             <span className={`${prefixCls}-loading-block`} style={{ width: '56%' }} />
             <span className={`${prefixCls}-loading-block`} style={{ width: '39%' }} />
           </p>
           <p>
             <span className={`${prefixCls}-loading-block`} style={{ width: '21%' }} />
             <span className={`${prefixCls}-loading-block`} style={{ width: '15%' }} />
             <span className={`${prefixCls}-loading-block`} style={{ width: '40%' }} />
           </p>
         </div>
       );
     }

     let head;
     if (!title) {
       head = null;
     } else {
       head = typeof title === 'string' ? (
         <div className={`${prefixCls}-head`}>
           <h3 className={`${prefixCls}-head-title`}>{title}</h3>
         </div>
       ) : (
         <div className={`${prefixCls}-head`}>
           <div className={`${prefixCls}-head-title`}>{title}</div>
         </div>
       );
     }

     return (
       <div {...others} className={classString}>
         {head}
         {extra ? <div className={`${prefixCls}-extra`}>{extra}</div> : null}
         <div className={`${prefixCls}-body`} style={bodyStyle}>{children}</div>
       </div>
     );
   }
};

Card.propTypes = {
  prefixCls: PropTypes.string,
  title: PropTypes.node,
  extra: PropTypes.node,
  bordered: PropTypes.bool,
  loading: PropTypes.bool,
  children: PropTypes.any,
  id: PropTypes.string,
  className: PropTypes.string
};
Card.displayName = "Card";
module.exports=Card;
