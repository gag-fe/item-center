import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import Checkbox from './Checkbox';
import PureRenderMixin from 'rc-util/lib/PureRenderMixin';

class CheckboxGroup extends React.Component {
  static propTypes = {
    defaultValue: PropTypes.array,
    value: PropTypes.array,
    options: PropTypes.array.isRequired,
    onChange: PropTypes.func,
  };
  constructor(props) {
    super(props);
    this.state = {
      value: props.value || props.defaultValue || [],
     };
  }
  componentWillReceiveProps(nextProps) {
    if ('value' in nextProps) {
      this.setState({
        value: nextProps.value || [],
      });
    }
  }
  shouldComponentUpdate(...args) {
    return PureRenderMixin.shouldComponentUpdate.apply(this, args);
  }
  getOptions() {
    const { options } = this.props;
    // https://github.com/Microsoft/TypeScript/issues/7960
    return (options).map(option => {
      if (typeof option === 'string') {
        return {
          label: option,
          value: option,
        };
      }
      return option;
    });
  }
  toggleOption = (option) => {
    const optionIndex = this.state.value.indexOf(option.value);
    const value = [...this.state.value];
    if (optionIndex === - 1) {
      value.push(option.value);
    } else {
      value.splice(optionIndex, 1);
    }
    if (!('value' in this.props)) {
      this.setState({ value });
    }
    const onChange = this.props.onChange;
    if (onChange) {
      onChange(value);
    }
  }
  render() {
    const { prefixCls, className } = this.props;
    const options = this.getOptions().map(option => (
      <Checkbox
        disabled={'disabled' in option ? option.disabled : this.props.disabled}
        checked={this.state.value.indexOf(option.value) !== -1}
        onChange={() => this.toggleOption(option)}
        className={`${prefixCls}-item`}
        key={option.value}
      >
        {option.label}
      </Checkbox>
    ));

    const classString = classNames(prefixCls, className);
    return (
      <div className={classString}>
        {options}
      </div>
    );
  }
}
CheckboxGroup.defaultProps = {
  options: [],
  prefixCls: 'ant-checkbox-group',
};
CheckboxGroup.propTypes = {
  /** 默认选中的选项 */
  defaultValue:PropTypes.arrayOf(PropTypes.string),
  /** 指定选中的选项 */
  value:PropTypes.arrayOf(PropTypes.string),
  /** 指定可选项 */
  options:PropTypes.oneOfType([
      PropTypes.arrayOf(PropTypes.shape({
        label: PropTypes.string.isRequired,
        value: PropTypes.string.isRequired,
        disabled:PropTypes.bool,
        })),
      PropTypes.arrayOf(PropTypes.string)
    ]),
  /** 变化时回调函数 */
  onChange:PropTypes.func,
  disabled:PropTypes.bool,
  prefixCls: PropTypes.string,
  className: PropTypes.string,
};
CheckboxGroup.displayName = "CheckboxGroup";
module.exports=CheckboxGroup;
