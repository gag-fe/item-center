import React from 'react';
import { Children, cloneElement } from 'react';
import classNames from 'classnames';
import assign from 'object-assign';
import PropTypes from 'prop-types';


class Row extends React.Component {
  static propTypes = {
    type: PropTypes.string,
    align: PropTypes.string,
    justify: PropTypes.string,
    className: PropTypes.string,
    children: PropTypes.node,
    gutter: PropTypes.number,
    prefixCls: PropTypes.string,
  };
  render() {
    const { type, justify, align, className, gutter, style, children,
      prefixCls = 'ant-row', ...others } = this.props;
    const classes = classNames({
      [prefixCls]: !type,
      [`${prefixCls}-${type}`]: type,
      [`${prefixCls}-${type}-${justify}`]: type && justify,
      [`${prefixCls}-${type}-${align}`]: type && align,
    }, className);
    const rowStyle = gutter > 0 ? assign({}, {
      marginLeft: gutter / -2,
      marginRight: gutter/ -2,
    }, style) : style;
    const cols = Children.map(children, (col) => {
      if (!col) {
        return null;
      }
      if (col.props && gutter > 0) {
        return cloneElement(col, {
          style: assign({}, {
            paddingLeft: gutter/ 2,
            paddingRight: gutter/ 2,
          }, col.props.style),
        });
      }
      return col;
    });
    return <div {...others} className={classes} style={rowStyle}>{cols}</div>;
  }
}
Row.defaultProps = {
      gutter: 0,
};
Row.propTypes = {
  className: PropTypes.string,
  gutter: PropTypes.number,
  type: PropTypes.oneOf(['flex']),
  align:PropTypes.oneOf([ 'top','middle','bottom']),
  justify:PropTypes.oneOf([ 'start','end','center','space-around','space-between']),
  prefixCls: PropTypes.string,
};
Row.displayName = "Row";
module.exports=Row;
