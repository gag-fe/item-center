import React, { cloneElement } from 'react';
import '../style';
import PropTypes from 'prop-types';
import RcDropdown from 'rc-dropdown';
import classNames from 'classnames';
import warning from '@gag/util-web/warning';

 class Dropdown extends React.Component{
  static Button: PropTypes.node;
  getTransitionName() {
    const { placement = '' } = this.props;
    if (placement.indexOf('top') >= 0) {
      return 'slide-down';
    }
    return 'slide-up';
  }
  componentDidMount() {
    const { overlay } = this.props;
    const overlayProps = overlay.props;
    warning(
      !overlayProps.mode || overlayProps.mode === 'vertical',
      `mode="${overlayProps.mode}" is not supported for Dropdown\'s Menu.`,
    );
  }

  render() {
    const { children, prefixCls, overlay } = this.props;
    const dropdownTrigger = cloneElement(children, {
      className: classNames(children.props.className, `${prefixCls}-trigger`),
    });

    const fixedModeOverlay = cloneElement(overlay, {
      mode: 'vertical',
    });
    return (
      <RcDropdown transitionName={this.getTransitionName()} {...this.props} overlay={fixedModeOverlay}>
        {dropdownTrigger}
      </RcDropdown>
    );
  }
}
Dropdown.defaultProps = {
  prefixCls: 'ant-dropdown',
  mouseEnterDelay: 0.15,
  mouseLeaveDelay: 0.1,
  placement: 'bottomLeft',
};
Dropdown.propTypes = {
  trigger:PropTypes.arrayOf(PropTypes.string),
  overlay: PropTypes.node,
  onVisibleChange:PropTypes.func,
  visible:PropTypes.bool,
  align:PropTypes.object,
  getPopupContainer:PropTypes.func,
  prefixCls:PropTypes.string,
  placement:PropTypes.oneOf(['topLeft','topCenter','topRight','bottomLeft','bottomCenter' , 'bottomRight']),
};
Dropdown.displayName = "Dropdown";
module.exports=Dropdown;
