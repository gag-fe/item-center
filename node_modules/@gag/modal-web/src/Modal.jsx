import React from 'react';
import Dialog from 'rc-dialog';
import PropTypes from 'prop-types';
import addEventListener from 'rc-util/lib/Dom/addEventListener';
import Button from '@gag/button-web';

let mousePosition;
let mousePositionEventBinded;


export interface ModalContext {
  antLocale?: {
    Modal?: any,
  };
}

const ModalFuncProps=PropTypes.shape({
  visible: PropTypes.bool,
  title: PropTypes.oneOfType([
      PropTypes.string,
      PropTypes.node,
    ]),
  content: PropTypes.oneOfType([
      PropTypes.string,
      PropTypes.node,
    ]),
  onOk: PropTypes.func,
  onCancel: PropTypes.func,
  width: PropTypes.oneOfType([
      PropTypes.string,
      PropTypes.number,
    ]),
  iconClassName: PropTypes.string,
  okText: PropTypes.string,
  cancelText: PropTypes.string,
  iconType: PropTypes.string,
});


const ModalFunc =PropTypes.func;

class Modal extends React.Component{
  static info: ModalFunc;
  static success: ModalFunc;
  static error: ModalFunc;
  static warn: ModalFunc;
  static warning: ModalFunc;
  static confirm: ModalFunc;

  static contextTypes = {
    antLocale: PropTypes.object,
  };

  context: ModalContext;

  handleCancel = (e) => {
    const onCancel = this.props.onCancel;
    if (onCancel) {
      onCancel(e);
    }
  }

  handleOk = (e) => {
    const onOk = this.props.onOk;
    if (onOk) {
      onOk(e);
    }
  }

  componentDidMount() {
    if (mousePositionEventBinded) {
      return;
    }
    // 只有点击事件支持从鼠标位置动画展开
    addEventListener(document.documentElement, 'click', (e) => {
      mousePosition = {
        x: e.pageX,
        y: e.pageY,
      };
      // 100ms 内发生过点击事件，则从点击位置动画展示
      // 否则直接 zoom 展示
      // 这样可以兼容非点击方式展开
      setTimeout(() => mousePosition = null, 100);
    });
    mousePositionEventBinded = true;
  }

  render() {
    let { okText, cancelText, confirmLoading, footer, visible } = this.props;

    if (this.context.antLocale && this.context.antLocale.Modal) {
      okText = okText || this.context.antLocale.Modal.okText;
      cancelText = cancelText || this.context.antLocale.Modal.cancelText;
    }

    const defaultFooter = [(
      <Button
        key="cancel"
        size="large"
        onClick={this.handleCancel}
      >
        {cancelText || '取消'}
      </Button>
    ), (
      <Button
        key="confirm"
        type="primary"
        size="large"
        loading={confirmLoading}
        onClick={this.handleOk}
      >
        {okText || '确定'}
      </Button>
    )];

    return (
      <Dialog
        onClose={this.handleCancel}
        footer={footer === undefined ? defaultFooter : footer}
        {...this.props}
        visible={visible}
        mousePosition={mousePosition}
      />
    );
  }
}
Modal.defaultProps = {
  prefixCls: 'ant-modal',
  width: 520,
  transitionName: 'zoom',
  maskTransitionName: 'fade',
  confirmLoading: false,
  visible: false,
};
Modal.propTypes = {
  /** 对话框是否可见*/
  visible: PropTypes.bool,
  /** 确定按钮 loading*/
  confirmLoading: PropTypes.bool,
  /** 标题*/
  title: PropTypes.oneOfType([
      PropTypes.node,
      PropTypes.string,
    ]),
  /** 是否显示右上角的关闭按钮*/
  closable: PropTypes.bool,
  /** 点击确定回调*/
  onOk: PropTypes.func,
  /** 点击模态框右上角叉、取消按钮、Props.maskClosable 值为 true 时的遮罩层或键盘按下 Esc 时的回调*/
  onCancel: PropTypes.func,
  afterClose:PropTypes.func,
  /** 宽度*/
  width: PropTypes.oneOfType([
      PropTypes.string,
      PropTypes.number,
    ]),
  /** 底部内容*/
  footer: PropTypes.node,
  /** 确认按钮文字*/
  okText: PropTypes.string,
  /** 取消按钮文字*/
  cancelText: PropTypes.string,
  /** 点击蒙层是否允许关闭*/
  maskClosable: PropTypes.bool,
  wrapClassName: PropTypes.string,
  maskTransitionName: PropTypes.string,
  transitionName: PropTypes.string,
  className: PropTypes.string,
};
Modal.displayName = "Modal";
module.exports=Modal;
