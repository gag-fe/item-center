import React from 'react';
import ReactDOM from 'react-dom';
import PropTypes from 'prop-types';
import Button from '@gag/button-web';

class ActionButton extends React.Component{
  timeoutId: number;
  constructor(props) {
    super(props);
    this.state = {
      loading: false,
    };
  }
  componentDidMount() {
    if (this.props.autoFocus) {
      const $this = ReactDOM.findDOMNode(this);
      this.timeoutId = setTimeout(() => $this.focus());
    }
  }
  componentWillUnmount() {
    clearTimeout(this.timeoutId);
  }
  onClick = () => {
    const { actionFn, closeActionButton } = this.props;
    if (actionFn) {
      let ret;
      if (actionFn.length) {
        ret = actionFn(closeActionButton);
      } else {
        ret = actionFn();
        if (!ret) {
          closeActionButton();
        }
      }
      if (ret && ret.then) {
        this.setState({ loading: true });
        ret.then((...args) => {
          // It's unnecessary to set loading=false, for the ActionButton will be unmounted after close.
          // this.setState({ loading: false });
          closeActionButton(...args);
        });
      }
    } else {
      closeActionButton();
    }
  }

  render() {
    const { type, children } = this.props;
    const loading = this.state.loading;
    return (
      <Button type={type} size="large" onClick={this.onClick} loading={loading}>
        {children}
      </Button>
    );
  }
}
ActionButton.propTypes = {
  type: PropTypes.oneOf(['primary','dashed']),
  actionFn:PropTypes.func,
  closeActionButton:PropTypes.func,
  autoFocus:PropTypes.bool,
};
ActionButton.displayName = "ActionButton";
module.exports=ActionButton;
