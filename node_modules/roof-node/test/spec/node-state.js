var assert = require("assert")
var _ = require("lodash")
var Node = require("../../lib/node")
var async = require("async")

var User = Node.createClass({
  push : [function(){
    return new Promise(resolve=>{
      this.set('id', Date.now())
      setTimeout(resolve, 50)
    })
  }, 'push.initial', 'push.processing', 'push.end'],
  setFamily : [function( family ){
    this.set('family', family)
  },'setFamily.uncalled','setFamily.called']
})


describe("initial states test",function(){

  it("initial state should match",function(){
    var john = new User
    assert.equal( john.is("set.uncalled"), true )
    assert.equal( john.is("set.called"), false )
    //destroy 不再是 action 不能通过 is 判断
    //assert.equal( john.is("destroy.uncalled"), true )
    assert.equal( john.is("replace.uncalled"), true )
    assert.equal( john.is("setFamily.uncalled"), true )
    assert.equal( john.is("setFamily.called"), false )
  })

  it("change naive state", function(){
    var john = new User
    john.setFamily('Smith')
    assert.equal( john.is("setFamily.uncalled"), false )
    assert.equal( john.is("setFamily.called"), true )

    john.set('name', 'Jhon')
    assert.equal( john.is('set.called'), true)
    assert.equal( john.is('set.uncalled'), false)
  })
})


describe("async state test", function(){

  it('async method should have async state', function( done ){
    var props = {
      name : "Disel",
      age : 32
    }

    var disel = new User(props)

    assert.equal( disel.is("push.initial"), true )
    disel.push().then(function(){
      assert.equal( disel.is("push.end"), true )
      assert.notEqual( disel.get("id"), undefined )
      assert.equal( disel.is("set.uncalled"), false )
      assert.equal( disel.is("set.called"), true )
      //destroy 不再是 action
      //assert.equal( disel.is("destroy.uncalled"), true )
      assert.equal( disel.is("replace.uncalled"), true )
      done()
    }).catch(function(err){
      console.log( err )
      done(err)
    })

    assert.equal( disel.is("push.processing"), true )
  })
})
