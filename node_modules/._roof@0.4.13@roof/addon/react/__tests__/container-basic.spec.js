//require('jasmine-pit').install(window)
jest.autoMockOff()
jest.dontMock('es6-promise');
require('es6-promise').polyfill();

describe('react addon container test', function(){

  it('root container should be create without error', function(){

    var React = require('react')
    var TestUtils = require('react-addons-test-utils');
    var ReactDom = require('react-dom');

    require('../container')

    var SimpleRootContainer = require('./common/component/SimpleRootContainer.jsx')

    var rootContainer = TestUtils.renderIntoDocument(<SimpleRootContainer/>);
    var childDev = TestUtils.findRenderedDOMComponentWithTag(
      rootContainer, 'div');

    expect(ReactDom.findDOMNode(childDev).textContent).toEqual('rootContainer');
  })

  it('subscribe sync data', function(  ){
    var React = require('react')
    var TestUtils = require('react-addons-test-utils');
    var ReactDom = require('react-dom');
    require('../container')
    var syncUsersFactory = require('./common/data/users.js')
    var UsersRootContainer = require('./common/component/UsersRootContainer.factory.jsx')(
      {users : syncUsersFactory}
    )
    var rootContainer = TestUtils.renderIntoDocument(<UsersRootContainer/>);
    var users = syncUsersFactory()

    //对于非 async 的数据，必须能在一个tick内渲染出来
    //才能支持服务器端渲染
    //jest.runAllTicks()
      var usersDom= TestUtils.scryRenderedDOMComponentsWithClass(rootContainer, 'user');
      expect( usersDom.length ).toEqual( users.length );
  })

  it('subscribe async data', function(  ){
    var React = require('react')
    var TestUtils = require('react-addons-test-utils');
    var ReactDom = require('react-dom');
    require('../container')
    var asyncUsersFactory = require('./common/data/asyncUsers.js')
    var p = asyncUsersFactory()

    var UsersRootContainer = require('./common/component/UsersRootContainer.factory.jsx')(
      {users : asyncUsersFactory}
    )

    var rootContainer = TestUtils.renderIntoDocument(<UsersRootContainer/>);

    //这个时候,数据还没有好
    var usersDom= TestUtils.scryRenderedDOMComponentsWithClass(rootContainer, 'user');
    expect( usersDom.length ).toEqual( 0 );

    var users
    p.then(function( res ){
      users = res
    })

    //对于 async 的数据，nextTick 中应该可以拿到数据
    jest.runAllTimers()
    jest.runAllTicks()

    var usersDom= TestUtils.scryRenderedDOMComponentsWithClass(rootContainer, 'user');
    expect( usersDom.length ).toEqual( users.length );
  })

  it('data multi set should only render once', function(  ){
    var React = require('react')
    var TestUtils = require('react-addons-test-utils')
    var ReactDom = require('react-dom')
    var Roof = require('roof')
    require('../container')

    var rendered = 0
    var syncUsersFactory = require('./common/data/users.js')
    var UsersRootContainer = Roof.createRootContainer({
      data:{
        users : syncUsersFactory
      },
        render(){
          return <UserContainer />
        }
      })
    var UserContainer = Roof.createContainer({
      cursors : {
        users :'users'
      },
      render(){
        rendered++
        return null
      }
    })

    var rootContainer = TestUtils.renderIntoDocument(<UsersRootContainer instanceName='inst1'/>);
    var users = syncUsersFactory()

    //data can be retrieved from Roof
    var usersFromGlobal =Roof.Sources.inst1.get('users')
    expect( usersFromGlobal.length ).toEqual( users.length );
    expect( rendered ).toEqual( 1 );

    var timesToInsert = 3
    for( var i =0;i<timesToInsert;i++){
      //should make the view change
      usersFromGlobal.insert({name:'Ins'})
    }

    jest.runAllTicks()
    //先不处理，放到nextTick之后可能会引起服务器端渲染问题
    //expect( rendered ).toEqual( 2 );
    var usersDom= TestUtils.scryRenderedDOMComponentsWithClass(rootContainer, 'user');
    expect( usersFromGlobal.length ).toEqual( users.length +timesToInsert);
  })

})