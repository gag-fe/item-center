jest.autoMockOff()
jest.dontMock('es6-promise');
require('es6-promise').polyfill();

describe('react addon container test', function(){






  it('event should listen and fire', function(){
    var React = require('react')
    var TestUtils = require('react-addons-test-utils');
    var ReactDom = require('react-dom');

    require('../container')

    var RootContainerFactory = require('./common/component/RootContainer.factory.jsx')
    var Users = require('./common/component/UsersContainerWithInsert.jsx')
    var syncUsersFactory = require('./common/data/users.js')
    var userToInsert = {name:'Blue', family:'Duke', age:19}
    var eventFired = false
    var userEventFactory =  function( data ){
      return {
        'users.insert' : function(){
          data.get('users').insert( userToInsert )
          eventFired = true
        }
      }
    }

    var UsersRootContainer = RootContainerFactory(
      {users:syncUsersFactory},
      {users:userEventFactory},
      Users)

    var users = syncUsersFactory()

    var rootContainer = TestUtils.renderIntoDocument(<UsersRootContainer/>);
    var usersDom= TestUtils.scryRenderedDOMComponentsWithClass(rootContainer, 'user');
    expect( usersDom.length ).toEqual( users.length );

    //
    var clickButton = TestUtils.findRenderedDOMComponentWithTag( rootContainer, 'button')
    TestUtils.Simulate.click(clickButton);

    usersDom= TestUtils.scryRenderedDOMComponentsWithClass(rootContainer, 'user');
    expect( usersDom.length ).toEqual( users.length + 1);
    expect( eventFired ).toEqual( true);

  })




  it('event can be prevent by listener', function(){
    var React = require('react')
    var TestUtils = require('react-addons-test-utils');
    var ReactDom = require('react-dom');

    require('../container')
    var RootContainerFactory = require('./common/component/RootContainer.factory.jsx')
    var Users = require('./common/component/UsersContainerWithInsert.jsx')
    var syncUsersFactory = require('./common/data/users.js')
    var userToInsert = {name:'Blue', family:'Duke', age:19}
    var eventFired = false
    var userEventFactory =  function( data ){
      return {
        'users.insert' : function insertUser(){
          data.get('users').insert( userToInsert )
          eventFired = true
        }
      }
    }

    var guardEventFactory = function(){
      return {
        'users.insert' : {
          fn : function(){
            return this.error(500,{})
          },
          before : 'users.insertUser'
        }
      }
    }

    var UsersRootContainer = RootContainerFactory(
      {users:syncUsersFactory},
      {users:userEventFactory,guard:guardEventFactory},
      Users)

    var users = syncUsersFactory()

    var rootContainer = TestUtils.renderIntoDocument(<UsersRootContainer/>);
    var usersDom= TestUtils.scryRenderedDOMComponentsWithClass(rootContainer, 'user');

    var clickButton = TestUtils.findRenderedDOMComponentWithTag( rootContainer, 'button')
    TestUtils.Simulate.click(clickButton);
    //expect(TestUtils.Simulate.click.bind(TestUtils.Simulate,clickButton)).toThrow()

    expect( usersDom.length ).toEqual( users.length);
    expect( eventFired ).toEqual( false);
  })

})