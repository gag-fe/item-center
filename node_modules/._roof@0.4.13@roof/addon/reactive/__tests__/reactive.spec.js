//require('jasmine-pit').install(window)
jest.autoMockOff()
jest.dontMock('es6-promise');
require('es6-promise').polyfill();

describe('react addon container test', function(){

  it('data should be reactive', function(){

    require('../index.js')
    var syncUsersFactory = require('./common/data/users.js')
    var summaryFactory = require('./common/data/summary.js')

    var users = syncUsersFactory()
    var summary
    summaryFactory.init( users ).then( r =>{
      summary = r
    })

    jest.runAllTimers()
    jest.runAllTicks()


    var lastUsersLength = users.length
    var lastSummaryFamilies = Object.keys(summary.get('families')).length
    users.insert({name:'New',family:'NotLikeOthers'})

    //因为 reactive 的数据解析是包装在 promise 里面的
    jest.runAllTimers()
    jest.runAllTicks()

    expect( users.length ).toEqual(lastUsersLength+1)
    expect( Object.keys(summary.get('families')).length).toEqual( lastSummaryFamilies+1)
    console.log( Object.keys(summary.get('families')).length,  lastSummaryFamilies+1)
    //console.log(">>>>>>", lastUsersLength, lastSummaryFamilies)
  })


  it('subscribe reactive data', function(){
    var React = require('react')
    var TestUtils = require('react-addons-test-utils');
    var ReactDom = require('react-dom');
    var Roof = require('roof')
    require('../../react/container')
    require('../index.js')

    var syncUsersFactory = require('./common/data/users.js')
    var summaryFactory = require('./common/data/summary.js')
    var data = {
      users : syncUsersFactory,
      summary : summaryFactory
    }
    var UsersContainer = require('./common/component/UsersContainerWithInsert.jsx')
    var SummaryContainer = require('./common/component/SummaryContainer.jsx')
    var UsersAndSummaryContainer = Roof.createContainer({
      render(){
        return <div>
          <UsersContainer />
          <SummaryContainer />
        </div>
      }
    })

    var RootContainer = require('./common/component/RootContainer.factory.jsx')(
      data,
      {},
      UsersAndSummaryContainer
    )

    var rootContainer = TestUtils.renderIntoDocument(<RootContainer/>);
    var users = syncUsersFactory()
    var summary
    summaryFactory.init( users ).then( r =>{
      summary = r
    })

    jest.runAllTimers()
    jest.runAllTicks()

    //测试 users 的基本 dom
      var usersDom= TestUtils.scryRenderedDOMComponentsWithClass(rootContainer, 'user');
      expect( usersDom.length ).toEqual( users.length );
    //测试 summary 里面的渲染
    var familyDom = TestUtils.scryRenderedDOMComponentsWithClass(rootContainer, 'family');
      expect( familyDom.length ).toEqual( Object.keys( summary.get('families')).length)

    //插入了新的数据之后
    var clickButton = TestUtils.findRenderedDOMComponentWithTag( rootContainer, 'button')
    TestUtils.Simulate.click(clickButton);

    jest.runAllTimers()
    jest.runAllTicks()

    //测试 users
    var newUsersDom= TestUtils.scryRenderedDOMComponentsWithClass(rootContainer, 'user');
    expect( newUsersDom.length ).toEqual( users.length +1);

    //测试更新后的 summary
    var newFamilyDom = TestUtils.scryRenderedDOMComponentsWithClass(rootContainer, 'family');
    expect( newFamilyDom.length ).toEqual( Object.keys( summary.get('families')).length+1)

  })


})