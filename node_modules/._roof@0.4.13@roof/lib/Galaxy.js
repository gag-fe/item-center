var OrderedList = require('roof-bus/lib/orderedList.js')
var Event = require('events')
var SystemUtil = require("util")
var util = require('./util')


function Galaxy( dataModules  ){
  //存放真实的数据
  this.source = {}
  this.initialResults = {}
  var that = this

  var list = new OrderedList
  util.forEach(dataModules, function (moduleDef, name) {
    var order = {}
    if ( util.isPlainObject(moduleDef) && moduleDef.waitFor) {
      order.after = moduleDef.waitFor
    }
    list.insert(name, moduleDef, order)
  })


  list.forEach(function (moduleDef, name) {
    console.info('Initializing Roof data:', name)
    var result
    if (typeof moduleDef === 'function') {
      result = moduleDef()
      if (result instanceof Promise) {
        result.then(function (data) {
          that.source[name] = data
        })['catch'](function (err) {
          console.error("Data module initialize failed", name, err)
        })
      } else {
        that.source[name] = result
      }
      that.initialResults[name] = result

    } else {
      //一定是有waitFor 的对象
      var promises = []

      util.forEach(moduleDef.waitFor, function (waitForName) {
        if( that.initialResults[waitForName] instanceof  Promise ){
          promises.push( that.initialResults[waitForName])
        }
      })

      //因为 Promise 会默认放到 nextTick 里面执行
      //会导致 Falcor 等框架无法合并请求，所以这里特别判断一下 waitFor 里是否有 promise
      if( promises.length === 0 ){
        console.info("data waitFor resolved", name)
        that.initialResults[name] = moduleDef.init.apply(null, util.map(moduleDef.waitFor, function (waitForName) {
          return that.initialResults[waitForName]
        }))

        if( that.initialResults[name] instanceof Promise ){
          that.initialResults[name].then(function(source){
            that.source[name] =source
          })
        }else{
          that.source[name] = that.initialResults[name]
        }

      }else{
        that.initialResults[name] = Promise.all( util.map(moduleDef.waitFor, function (waitForName) {
          return that.initialResults[waitForName]
        })).then(function (dataValues) {
          console.info("data waitFor resolved", name, dataValues)
          return moduleDef.init.apply(null, dataValues)
        }).then(function(source){
          that.source[name] =source
        })
      }
    }
  }, function(){})

}

Galaxy.prototype.get = function( moduleName, getPromiseWhenNotReady ){
  var source = this.source[moduleName]
  if( source === undefined ){
    if( this.initialResults[moduleName] === undefined ){
      throw new Error('data ' + moduleName + ' is not defined.')
    }

    if( getPromiseWhenNotReady ){
      return this.initialResults[moduleName]
    }

    console.warn(moduleName + ' is not ready')
  }

  return source
}




module.exports = Galaxy

