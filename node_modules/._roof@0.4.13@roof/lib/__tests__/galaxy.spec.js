jest.autoMockOff()
jest.dontMock('es6-promise');
require('es6-promise').polyfill();



describe('react addon container test', function(){

  function userAndSummaryAssertion(users, rawUsers,summary){
    expect( users.length ).toBeDefined()
    expect( users.length ).toBeGreaterThan(0)
    expect( users.length ).toEqual(rawUsers.length)
    expect( summary.get('totalUser')).toEqual(rawUsers.length)

    var families = []
    users.forEach(user=>{
      if( families.indexOf( user.get('family') ) === -1 ){
        families.push( user.get('family'))
      }
    })

    expect(summary.get('families').join('')).toEqual(families.join(''))
  }


  it('sync data init', function(){
    var Galaxy = require('../Galaxy.js')
    var usersFactory = require('./common/data/users.js')
    var summaryFactory = require('./common/data/summary.js')
    var rawUsers = require('./common/data/users.raw.js')

    var galaxy = new Galaxy({
      users : usersFactory,
      summary : summaryFactory
    })

    var users = galaxy.get('users')
    var summary  = galaxy.get('summary')

    //即使有waitFor 也应该在一个tick里面完成
    userAndSummaryAssertion(users,rawUsers, summary)
  })

  it('async data init', function(){
    var Galaxy = require('../Galaxy.js')
    var asyncUsersFactory = require('./common/data/asyncUsers.js')
    var summaryFactory = require('./common/data/summary.js')
    var rawUsers = require('./common/data/users.raw.js')

    var galaxy = new Galaxy({
      users : asyncUsersFactory,
      summary : summaryFactory
    })

    //expect( galaxy.get('summary') ).toBe(undefined)
    //expect( galaxy.get.bind(galaxy,'fakeName')).toThrow('data fakeName is not defined.')

    jest.runAllTimers()
    jest.runAllTicks()

    var users = galaxy.get('users')
    var summary  = galaxy.get('summary')
    userAndSummaryAssertion(users,rawUsers, summary)
  })

})