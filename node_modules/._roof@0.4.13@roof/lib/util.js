var cloneDeep = require('lodash.clonedeep')

function assign(target) {
  var sources = Array.prototype.slice.call(arguments, 1)
  for( var j in sources ){
    for (var i in sources[j]) {
      if (sources[j].hasOwnProperty(i)) {
        target[i] = sources[j][i]
      }
    }
  }

  return target
}

function values(obj) {
  return Object.keys(obj).map(function (key) {
    return obj[key]
  })
}

function mapValues(obj, handler) {
  var output = {}
  for (var i in obj) {
    output[i] = handler(obj[i], i)
  }
  return output
}

function forEach(obj, handler) {
  for (var i in obj) {
    if( obj.hasOwnProperty(i)){
      handler(obj[i], i)
    }
  }
}

function map(obj, handler){
  var output = isArray(obj) ? [] : {}
  for( var i in obj ){
    if( obj.hasOwnProperty(i)){
      output[i] = handler(obj[i],i)
    }
  }
  return output
}

function isArray(obj){
  return Object.prototype.toString.call(obj) === '[object Array]'
}

function isPlainObject(obj) {
  return obj.constructor.name === 'Object'
}

function without(source, toRemove){
  var output = []
  source.forEach( function( item ){
    if( toRemove.indexOf(item) === -1){
      output.push( item )
    }
  })
  return output
}

function pick( obj, attrs  ){
  var output = {}
  attrs.forEach(function(attr){
    if( typeof obj[attr] === 'object' ){
      output[attr] =  cloneDeep(obj[attr] )
    }else{
      output[attr] = obj[attr]
    }
  })

  return output
}


function noop(){
  return null
}

function hook( obj, fnName, fn ){
  var _fn = obj[fnName] || noop
  obj[fnName] = function(){
    fn.apply(this, arguments)
    return _fn.apply(this, arguments)
  }
  return obj
}

function decorate( obj, fnName, fn){
  var _fn = obj[fnName]
  obj[fnName] = function(){
    return fn.apply( this, [_fn].concat( Array.prototype.slice.call(arguments)))
  }
  return obj
}


function intersection( ){
  var arraysToCheck = Array.prototype.slice.call( arguments, 0)
  var intersections = []
  arraysToCheck.forEach(function( arrayToCheck, i ){
    if( i === 0 ) return

    if( i === 1 ){
      arrayToCheck.forEach(function( toCheck ){
        if( arraysToCheck[0].indexOf( toCheck ) !== -1 ) intersections.push(toCheck)
      })

    }else{
      arrayToCheck.forEach(function( toCheck ){
        var intersectionIndex = intersections.indexOf( toCheck)
        if( intersectionIndex !== -1 ) return
        intersections.splice(intersectionIndex, 1)
      })
    }
  })
  return intersections
}

function union(origin){
  var result = origin.slice(0)
  var toUnions = Array.prototype.slice.call( arguments, 1 )
  toUnions.forEach(function(toUnion){
    toUnion.forEach(function(item){
      if( result.indexOf(item) === -1){
        result.push(item)
      }
    })
  })

  return result
}

module.exports = {
  assign :assign,
  values : values,
  mapValues : mapValues,
  forEach : forEach,
  map : map,
  isArray:isArray,
  isPlainObject : isPlainObject,
  pick : pick,
  without : without,
  hook : hook,
  decorate: decorate,
  noop: noop,
  intersection : intersection,
  union:union
}